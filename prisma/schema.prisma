generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status_enum {
  PENDING
  ACCEPTED
  REJECTED
}

model user_account {
  id                                                         Int              @id @default(autoincrement())
  first_name                                                 String?
  middle_name                                                String?
  last_name                                                  String?
  mobile_number                                              String           @unique @db.VarChar(10)
  email                                                      String           @unique
  password_hash                                              String
  registered_at                                              DateTime         @default(now()) @db.Timestamp(6)
  last_login                                                 DateTime?        @db.Timestamp(6)
  bio                                                        String?
  post_count                                                 Int              @default(0)
  follower_count                                             Int              @default(0)
  following_count                                            Int              @default(0)
  follow_request_follow_request_source_user_idTouser_account follow_request[] @relation("follow_request_source_user_idTouser_account")
  follow_request_follow_request_target_user_idTouser_account follow_request[] @relation("follow_request_target_user_idTouser_account")
  group_member                                               group_member[]
  group_message                                              group_message[]
  post                                                       post[]
  post_comment                                               post_comment[]
  post_like                                                  post_like[]
  user_group                                                 user_group[]
  user_message_user_message_source_user_idTouser_account     user_message[]   @relation("user_message_source_user_idTouser_account")
  user_message_user_message_target_user_idTouser_account     user_message[]   @relation("user_message_target_user_idTouser_account")
}

model follow_request {
  id             Int          @id @default(autoincrement())
  source_user_id Int
  target_user_id Int
  request_status status_enum  @default(PENDING)
  created_at     DateTime     @default(now()) @db.Timestamp(6)
  updated_at     DateTime     @db.Timestamp(6)
  source         user_account @relation("follow_request_source_user_idTouser_account", fields: [source_user_id], references: [id], onDelete: Cascade)
  target         user_account @relation("follow_request_target_user_idTouser_account", fields: [target_user_id], references: [id], onDelete: Cascade)

  @@unique([source_user_id, target_user_id])
}

model user_message {
  id             Int          @id @default(autoincrement())
  source_user_id Int
  target_user_id Int
  message_text   String?
  created_at     DateTime     @default(now()) @db.Timestamp(6)
  updated_at     DateTime     @db.Timestamp(6)
  source         user_account @relation("user_message_source_user_idTouser_account", fields: [source_user_id], references: [id], onDelete: Cascade)
  target         user_account @relation("user_message_target_user_idTouser_account", fields: [target_user_id], references: [id], onDelete: Cascade)

  @@index([source_user_id])
  @@index([target_user_id])
}

model post {
  id           Int            @id @default(autoincrement())
  user_id      Int
  message_text String?
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @db.Timestamp(6)
  user_account user_account   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post_comment post_comment[]
  post_like    post_like[]

  @@index([user_id])
}

model post_like {
  id           Int          @id @default(autoincrement())
  user_id      Int
  post_id      Int
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @db.Timestamp(6)
  post         post         @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user_account user_account @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id])
  @@index([post_id])
  @@index([user_id])
}

model post_comment {
  id             Int          @id @default(autoincrement())
  content        String
  post_id        Int
  author_user_id Int
  created_at     DateTime     @default(now()) @db.Timestamp(6)
  updated_at     DateTime     @db.Timestamp(6)
  user_account   user_account @relation(fields: [author_user_id], references: [id], onDelete: Cascade)
  post           post         @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([author_user_id])
  @@index([post_id])
}

model user_group {
  id                 Int             @id @default(autoincrement())
  created_by_user_id Int
  title              String          @db.VarChar(50)
  summary            String?
  created_at         DateTime        @default(now()) @db.Timestamp(6)
  updated_at         DateTime        @db.Timestamp(6)
  group_member       group_member[]
  group_message      group_message[]
  user_account       user_account    @relation(fields: [created_by_user_id], references: [id], onDelete: Cascade)

  @@index([created_by_user_id])
}

model group_member {
  id           Int          @id @default(autoincrement())
  group_id     Int
  user_id      Int
  joined_at    DateTime     @default(now()) @db.Timestamp(6)
  user_group   user_group   @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user_account user_account @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([group_id, user_id])
  @@index([group_id])
  @@index([user_id])
}

model group_message {
  id           Int          @id @default(autoincrement())
  group_id     Int
  user_id      Int
  message_text String?
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @db.Timestamp(6)
  user_group   user_group   @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user_account user_account @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([group_id])
  @@index([user_id])
}
