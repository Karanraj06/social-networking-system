// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int             @id @default(autoincrement())
  firstName              String?         @db.VarChar(50)
  middleName             String?         @db.VarChar(50)
  lastName               String?         @db.VarChar(50)
  mobile                 String?         @unique @db.VarChar(10)
  email                  String?         @unique @db.VarChar(50)
  passwordHash           String          @db.VarChar(32)
  registeredAt           DateTime        @default(now())
  lastLogin              DateTime?
  bio                    String?
  postCount              Int             @default(0)
  followerCount          Int             @default(0)
  followingCount         Int             @default(0)
  sentFollowRequests     FollowRequest[] @relation("sentFollowRequests")
  receivedFollowRequests FollowRequest[] @relation("receivedFollowRequests")
  sentMessages           Message[]       @relation("sentMessages")
  receivedMessages       Message[]       @relation("receivedMessages")
  Post                   Post[]
  Group                  Group[]
  GroupMember            GroupMember[]
  GroupMessage           GroupMessage[]
  Like                   Like[]
  Comment                Comment[]
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model FollowRequest {
  id        Int      @id @default(autoincrement())
  source    User     @relation("sentFollowRequests", fields: [sourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceId  Int
  target    User     @relation("receivedFollowRequests", fields: [targetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  targetId  Int
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sourceId, targetId])
}

model Message {
  id        Int      @id @default(autoincrement())
  source    User     @relation("sentMessages", fields: [sourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceId  Int
  target    User     @relation("receivedMessages", fields: [targetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  targetId  Int
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sourceId])
  @@index([targetId])
}

model Post {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  message   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Like      Like[]
  Comment   Comment[]

  @@index([userId])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
}

model Group {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy    Int
  subject      String         @db.VarChar(50)
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  GroupMember  GroupMember[]
  GroupMessage GroupMessage[]

  @@index([createdBy])
}

model GroupMember {
  id       Int      @id @default(autoincrement())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId  Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   Int
  joinedAt DateTime @default(now())

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model GroupMessage {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId])
  @@index([userId])
}
